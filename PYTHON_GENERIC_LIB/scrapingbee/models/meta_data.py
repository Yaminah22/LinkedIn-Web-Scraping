# -*- coding: utf-8 -*-

"""
scrapingbee

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class MetaData(object):

    """Implementation of the 'meta_data' model.

    TODO: type model description here.

    Attributes:
        url (str): TODO: type description here.
        number_of_results (int): TODO: type description here.
        location (object): TODO: type description here.
        number_of_organic_results (int): TODO: type description here.
        number_of_ads (int): TODO: type description here.
        number_of_page (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "number_of_results": 'number_of_results',
        "location": 'location',
        "number_of_organic_results": 'number_of_organic_results',
        "number_of_ads": 'number_of_ads',
        "number_of_page": 'number_of_page'
    }

    def __init__(self,
                 url=None,
                 number_of_results=None,
                 location=None,
                 number_of_organic_results=None,
                 number_of_ads=None,
                 number_of_page=None):
        """Constructor for the MetaData class"""

        # Initialize members of the class
        self.url = url 
        self.number_of_results = number_of_results 
        self.location = location 
        self.number_of_organic_results = number_of_organic_results 
        self.number_of_ads = number_of_ads 
        self.number_of_page = number_of_page 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if dictionary.get("url") else None
        number_of_results = dictionary.get("number_of_results") if dictionary.get("number_of_results") else None
        location = dictionary.get("location") if dictionary.get("location") else None
        number_of_organic_results = dictionary.get("number_of_organic_results") if dictionary.get("number_of_organic_results") else None
        number_of_ads = dictionary.get("number_of_ads") if dictionary.get("number_of_ads") else None
        number_of_page = dictionary.get("number_of_page") if dictionary.get("number_of_page") else None
        # Return an object of this model
        return cls(url,
                   number_of_results,
                   location,
                   number_of_organic_results,
                   number_of_ads,
                   number_of_page)
