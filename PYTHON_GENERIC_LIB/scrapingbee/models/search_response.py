# -*- coding: utf-8 -*-

"""
scrapingbee

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from scrapingbee.models.knowledge_graph import KnowledgeGraph
from scrapingbee.models.local_results import LocalResults
from scrapingbee.models.meta_data import MetaData
from scrapingbee.models.organic_results import OrganicResults
from scrapingbee.models.questions import Questions
from scrapingbee.models.related_queries import RelatedQueries
from scrapingbee.models.related_searches import RelatedSearches
from scrapingbee.models.top_stories import TopStories


class SearchResponse(object):

    """Implementation of the 'search response' model.

    TODO: type model description here.

    Attributes:
        meta_data (MetaData): TODO: type description here.
        organic_results (List[OrganicResults]): TODO: type description here.
        local_results (List[LocalResults]): TODO: type description here.
        top_ads (List[str]): TODO: type description here.
        bottom_ads (List[str]): TODO: type description here.
        related_queries (List[RelatedQueries]): TODO: type description here.
        questions (List[Questions]): TODO: type description here.
        top_stories (List[TopStories]): TODO: type description here.
        news_results (str): TODO: type description here.
        knowledge_graph (KnowledgeGraph): TODO: type description here.
        related_searches (RelatedSearches): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "meta_data": 'meta_data',
        "organic_results": 'organic_results',
        "local_results": 'local_results',
        "top_ads": 'top_ads',
        "bottom_ads": 'bottom_ads',
        "related_queries": 'related_queries',
        "questions": 'questions',
        "top_stories": 'top_stories',
        "news_results": 'news_results',
        "knowledge_graph": 'knowledge_graph',
        "related_searches": 'related_searches'
    }

    def __init__(self,
                 meta_data=None,
                 organic_results=None,
                 local_results=None,
                 top_ads=None,
                 bottom_ads=None,
                 related_queries=None,
                 questions=None,
                 top_stories=None,
                 news_results=None,
                 knowledge_graph=None,
                 related_searches=None):
        """Constructor for the SearchResponse class"""

        # Initialize members of the class
        self.meta_data = meta_data 
        self.organic_results = organic_results 
        self.local_results = local_results 
        self.top_ads = top_ads 
        self.bottom_ads = bottom_ads 
        self.related_queries = related_queries 
        self.questions = questions 
        self.top_stories = top_stories 
        self.news_results = news_results 
        self.knowledge_graph = knowledge_graph 
        self.related_searches = related_searches 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        meta_data = MetaData.from_dictionary(dictionary.get('meta_data')) if dictionary.get('meta_data') else None
        organic_results = None
        if dictionary.get('organic_results') is not None:
            organic_results = [OrganicResults.from_dictionary(x) for x in dictionary.get('organic_results')]
        local_results = None
        if dictionary.get('local_results') is not None:
            local_results = [LocalResults.from_dictionary(x) for x in dictionary.get('local_results')]
        top_ads = dictionary.get("top_ads") if dictionary.get("top_ads") else None
        bottom_ads = dictionary.get("bottom_ads") if dictionary.get("bottom_ads") else None
        related_queries = None
        if dictionary.get('related_queries') is not None:
            related_queries = [RelatedQueries.from_dictionary(x) for x in dictionary.get('related_queries')]
        questions = None
        if dictionary.get('questions') is not None:
            questions = [Questions.from_dictionary(x) for x in dictionary.get('questions')]
        top_stories = None
        if dictionary.get('top_stories') is not None:
            top_stories = [TopStories.from_dictionary(x) for x in dictionary.get('top_stories')]
        news_results = dictionary.get("news_results") if dictionary.get("news_results") else None
        knowledge_graph = KnowledgeGraph.from_dictionary(dictionary.get('knowledge_graph')) if dictionary.get('knowledge_graph') else None
        related_searches = RelatedSearches.from_dictionary(dictionary.get('related_searches')) if dictionary.get('related_searches') else None
        # Return an object of this model
        return cls(meta_data,
                   organic_results,
                   local_results,
                   top_ads,
                   bottom_ads,
                   related_queries,
                   questions,
                   top_stories,
                   news_results,
                   knowledge_graph,
                   related_searches)
