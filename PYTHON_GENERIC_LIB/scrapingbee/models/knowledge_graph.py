# -*- coding: utf-8 -*-

"""
scrapingbee

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from scrapingbee.models.known_attribute import KnownAttribute
from scrapingbee.models.search import Search


class KnowledgeGraph(object):

    """Implementation of the 'knowledge_graph' model.

    TODO: type model description here.

    Attributes:
        id (str): TODO: type description here.
        title (str): TODO: type description here.
        images (List[object]): TODO: type description here.
        website (str): TODO: type description here.
        source (Search): TODO: type description here.
        description (str): TODO: type description here.
        known_attributes (List[KnownAttribute]): TODO: type description here.
        block_position (int): TODO: type description here.
        people_also_search_for (List[Search]): TODO: type description here.
        people_also_search_for_view_more_link (str): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "title": 'title',
        "images": 'images',
        "website": 'website',
        "source": 'source',
        "description": 'description',
        "known_attributes": 'known_attributes',
        "block_position": 'block_position',
        "people_also_search_for": 'people_also_search_for',
        "people_also_search_for_view_more_link": 'people_also_search_for_view_more_link'
    }

    def __init__(self,
                 id=None,
                 title=None,
                 images=None,
                 website=None,
                 source=None,
                 description=None,
                 known_attributes=None,
                 block_position=None,
                 people_also_search_for=None,
                 people_also_search_for_view_more_link=None):
        """Constructor for the KnowledgeGraph class"""

        # Initialize members of the class
        self.id = id 
        self.title = title 
        self.images = images 
        self.website = website 
        self.source = source 
        self.description = description 
        self.known_attributes = known_attributes 
        self.block_position = block_position 
        self.people_also_search_for = people_also_search_for 
        self.people_also_search_for_view_more_link = people_also_search_for_view_more_link 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        title = dictionary.get("title") if dictionary.get("title") else None
        images = dictionary.get("images") if dictionary.get("images") else None
        website = dictionary.get("website") if dictionary.get("website") else None
        source = Search.from_dictionary(dictionary.get('source')) if dictionary.get('source') else None
        description = dictionary.get("description") if dictionary.get("description") else None
        known_attributes = None
        if dictionary.get('known_attributes') is not None:
            known_attributes = [KnownAttribute.from_dictionary(x) for x in dictionary.get('known_attributes')]
        block_position = dictionary.get("block_position") if dictionary.get("block_position") else None
        people_also_search_for = None
        if dictionary.get('people_also_search_for') is not None:
            people_also_search_for = [Search.from_dictionary(x) for x in dictionary.get('people_also_search_for')]
        people_also_search_for_view_more_link = dictionary.get("people_also_search_for_view_more_link") if dictionary.get("people_also_search_for_view_more_link") else None
        # Return an object of this model
        return cls(id,
                   title,
                   images,
                   website,
                   source,
                   description,
                   known_attributes,
                   block_position,
                   people_also_search_for,
                   people_also_search_for_view_more_link)
