# -*- coding: utf-8 -*-

"""
scrapingbee

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from scrapingbee.models.output import Output


class AllLinks(object):

    """Implementation of the 'AllLinks' model.

    TODO: type model description here.

    Attributes:
        selector (str): TODO: type description here.
        mtype (str): TODO: type description here.
        output (Output): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "selector": 'selector',
        "mtype": 'type',
        "output": 'output'
    }

    def __init__(self,
                 selector=None,
                 mtype=None,
                 output=None):
        """Constructor for the AllLinks class"""

        # Initialize members of the class
        self.selector = selector 
        self.mtype = mtype 
        self.output = output 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        selector = dictionary.get("selector") if dictionary.get("selector") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        output = Output.from_dictionary(dictionary.get('output')) if dictionary.get('output') else None
        # Return an object of this model
        return cls(selector,
                   mtype,
                   output)
