# -*- coding: utf-8 -*-

"""
scrapingbee

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OrganicResults(object):

    """Implementation of the 'organic_results' model.

    TODO: type model description here.

    Attributes:
        url (str): TODO: type description here.
        displayed_url (str): TODO: type description here.
        description (object): TODO: type description here.
        position (int): TODO: type description here.
        title (str): TODO: type description here.
        domain (str): TODO: type description here.
        sitelinks (object): TODO: type description here.
        rich_snippet (object): TODO: type description here.
        date (str): TODO: type description here.
        date_utc (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "displayed_url": 'displayed_url',
        "description": 'description',
        "position": 'position',
        "title": 'title',
        "domain": 'domain',
        "sitelinks": 'sitelinks',
        "rich_snippet": 'rich_snippet',
        "date": 'date',
        "date_utc": 'date_utc'
    }

    _nullables = [
        'date',
        'date_utc',
    ]

    def __init__(self,
                 url=None,
                 displayed_url=None,
                 description=None,
                 position=None,
                 title=None,
                 domain=None,
                 sitelinks=None,
                 rich_snippet=None,
                 date=None,
                 date_utc=None):
        """Constructor for the OrganicResults class"""

        # Initialize members of the class
        self.url = url 
        self.displayed_url = displayed_url 
        self.description = description 
        self.position = position 
        self.title = title 
        self.domain = domain 
        self.sitelinks = sitelinks 
        self.rich_snippet = rich_snippet 
        self.date = date 
        self.date_utc = date_utc 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if dictionary.get("url") else None
        displayed_url = dictionary.get("displayed_url") if dictionary.get("displayed_url") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        position = dictionary.get("position") if dictionary.get("position") else None
        title = dictionary.get("title") if dictionary.get("title") else None
        domain = dictionary.get("domain") if dictionary.get("domain") else None
        sitelinks = dictionary.get("sitelinks") if dictionary.get("sitelinks") else None
        rich_snippet = dictionary.get("rich_snippet") if dictionary.get("rich_snippet") else None
        date = dictionary.get("date") if dictionary.get("date") else None
        date_utc = dictionary.get("date_utc") if dictionary.get("date_utc") else None
        # Return an object of this model
        return cls(url,
                   displayed_url,
                   description,
                   position,
                   title,
                   domain,
                   sitelinks,
                   rich_snippet,
                   date,
                   date_utc)
