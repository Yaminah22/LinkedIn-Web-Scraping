# -*- coding: utf-8 -*-

"""
scrapingbee

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from scrapingbee.api_helper import APIHelper
from scrapingbee.configuration import Server
from scrapingbee.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from scrapingbee.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration


class HTMLAPIController(BaseController):

    """A Controller to access Endpoints in the scrapingbee API."""
    def __init__(self, config):
        super(HTMLAPIController, self).__init__(config)

    def usage_information(self):
        """Does a GET request to /v1/usage.

        TODO: type endpoint description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/v1/usage')
            .http_method(HttpMethodEnum.GET)
            .auth(Single('global'))
        ).execute()

    def json_response(self,
                      url,
                      render_js,
                      json_response):
        """Does a GET request to /v1.

        TODO: type endpoint description here.

        Args:
            url (str): The URL you want to scrape
            render_js (bool): Render the website  in  an headless browser
            json_response (bool): Wrap response in JSON.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/v1')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('url')
                         .value(url))
            .query_param(Parameter()
                         .key('render_js')
                         .value(render_js))
            .query_param(Parameter()
                         .key('json_response')
                         .value(json_response))
            .auth(Single('global'))
        ).execute()

    def html(self,
             url,
             render_js):
        """Does a GET request to /v1.

        TODO: type endpoint description here.

        Args:
            url (str): The URL you want to scrape
            render_js (bool): Render the website  in  an headless browser

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/v1')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('url')
                         .value(url))
            .query_param(Parameter()
                         .key('render_js')
                         .value(render_js))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def screenshot_response(self,
                            url,
                            render_js,
                            screenshot):
        """Does a GET request to /v1.

        TODO: type endpoint description here.

        Args:
            url (str): The URL you want to scrape
            render_js (bool): Render the website  in  an headless browser
            screenshot (bool): TODO: type description here.

        Returns:
            binary: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/v1')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('url')
                         .value(url))
            .query_param(Parameter()
                         .key('render_js')
                         .value(render_js))
            .query_param(Parameter()
                         .key('screenshot')
                         .value(screenshot))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()
